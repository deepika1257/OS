#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t wrt;
int readcount = 0;
pthread_mutex_t mutex;

void* writer(void* arg) {
    sem_wait(&wrt);
    printf("Writer %d is writing...\n", *(int*)arg);
    sleep(1);
    printf("Writer %d finished writing.\n", *(int*)arg);
    sem_post(&wrt);
    return NULL;
}

void* reader(void* arg) {
    pthread_mutex_lock(&mutex);
    readcount++;
    if(readcount == 1)
        sem_wait(&wrt);
    pthread_mutex_unlock(&mutex);

    printf("Reader %d is reading...\n", *(int*)arg);
    sleep(1);

    pthread_mutex_lock(&mutex);
    readcount--;
    if(readcount == 0)
        sem_post(&wrt);
    pthread_mutex_unlock(&mutex);

    printf("Reader %d finished reading.\n", *(int*)arg);
    return NULL;
}

int main() {
    pthread_t r1, r2, w1;
    int a=1, b=2, c=1;
    sem_init(&wrt,0,1);
    pthread_mutex_init(&mutex,NULL);

    pthread_create(&r1,NULL,reader,&a);
    pthread_create(&w1,NULL,writer,&c);
    pthread_create(&r2,NULL,reader,&b);

    pthread_join(r1,NULL);
    pthread_join(w1,NULL);
    pthread_join(r2,NULL);

    pthread_mutex_destroy(&mutex);
    sem_destroy(&wrt);
    return 0;
}

sample output:
Reader 1 is reading...
Reader 1 finished reading.
Writer 1 is writing...
Writer 1 finished writing.
Reader 2 is reading...
Reader 2 finished reading.
